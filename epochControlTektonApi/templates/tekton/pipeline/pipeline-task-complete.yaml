#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: pipeline-task-complete
  namespace: {{ param.ci_config.pipeline_namespace }}
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/tags: complete
    tekton.dev/displayName: "pipeline complete"
spec:
  params:
    - name: workspace_id
    - name: task_id
    - name: subdirectory
  workspaces:
  - name: source
    description: Holds the context and docker file
  steps:
    - name: pipeline-complete-task
      image: python
      env:
      - name: API_TEKTON_TASK
        value: "http://epoch-control-tekton-api.epoch-system.svc:8000"
      script: |
        #!/bin/bash

        rm -rf $(workspaces.source.path)/$(params.subdirectory)

        python - <<EOF
        import urllib.request
        import json

        req_url="$API_TEKTON_TASK/workspace/$(params.workspace_id)/tekton/task/$(params.task_id)"

        req_header = {
          'Content-Type': 'application/json',
        }
        req_body = json.dumps({
          'status' :                          'COMPLETE',
        })
        
        request = urllib.request.Request(req_url, data=req_body.encode(), method='PATCH', headers=req_header)

        with urllib.request.urlopen(request) as response:
            body = json.loads(response.read())
            headers = response.getheaders()
            status = response.getcode()

        if not ( status == 200 or status == 201 ):
            raise Exception('HTTP Reseponse Error HTTP-CODE = {}'.format(status))

        EOF

