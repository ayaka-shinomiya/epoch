#   Copyright 2019 NEC Corporation
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
apiVersion: v1
data:
  common-import-logger.sh: |+
    #!/bin/bash
    #   Copyright 2021 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    LOGFILE="/var/log/epoch/epoch-setting-tools.log.`TZ=JST-9 date '+%Y%m%d'`"
    _LOGNAME=$1

    function logger() {
        LOG_LEVEL=$1
        LOG_MESSAGE=$2
        LOG_TEXT="[`TZ=JST-9 date '+%Y/%m/%d %H:%M:%S'`][${_LOGNAME}][${LOG_LEVEL}] ${LOG_MESSAGE}"
        if [ "${LOG_LEVEL}" != "DEBUG" ]; then
            echo "[${LOG_LEVEL}] ${LOG_MESSAGE}"
        fi
        echo "${LOG_TEXT}" > /proc/1/fd/1
        echo "${LOG_TEXT}" >> "${LOGFILE}"
    }

  get-gitlab-initial-root-password.sh: |+
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    echo -n "gitlab root initial password : "
    kubectl get secret gitlab-gitlab-initial-root-password -ojsonpath='{.data.password}' -n gitlab | base64 --decode
    echo ""

  get-keycloak-initial-admin-password.sh: |+
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    echo -n "keycloak admin password : "
    kubectl get secret  exastro-platform-authentication-infra-secret -n exastro-platform-authentication-infra -o json | jq -r ".data.KEYCLOAK_PASSWORD" | base64 -d
    echo ""

  get-workspace-tools-account.sh: |+
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    if [ $# -ne 1 ]; then
        echo "Usage : `basename $0` workspace_id"
        exit 1
    fi

    kubectl exec -i -n epoch-system deploy/workspace-db -- mysql -N -B -u root -ppassword workspace_db -e"select info from workspace_access where workspace_id=$1;"  2> /dev/null | jq

  set-host-gitlab.sh: |
    #!/bin/bash
    #   Copyright 2019 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.
    BASENAME=$(basename "$0")
    CMD_RESULT="/tmp/result.$$"
    LF='
    '
    source "`dirname $0`/common-import-logger.sh" "${BASENAME}"

    logger "INFO" "START : set-host-gitlab.sh"

    GITLAB_NAMESPACE="gitlab"
    GITLAB_INSTALL_CHECK_TIMES=360
    GIT_API_BASE="http://gitlab-webservice-default.${GITLAB_NAMESPACE}.svc:8181"

    #
    # check parameter
    #
    if [ $# -ne 1 ]; then
        logger "ERROR" "Usage : ${BASENAME} [hostname or IPaddress]"
        logger "ERROR" "Check the parameters and try again"
        exit 1
    fi

    PRM_MY_HOST="$1"
    logger "INFO" "PARAM PRM_MY_HOST : ${PRM_MY_HOST}"

    GITLAB_CLONE_URL="https://${PRM_MY_HOST}:31183/"

    logger "INFO" "START : Wait Gitlab Installer finished"

    INSTALLER_STATUS=""
    for ((i=1; i<=${GITLAB_INSTALL_CHECK_TIMES}; i++)); do
        sleep 10;
        INSTALLER_STATUS=$(kubectl get job/gitlab-installer -n ${GITLAB_NAMESPACE} -o "jsonpath={.status.conditions[0].type}")
        if [ $? -ne 0 ]; then
            continue;
        fi
        if [ "${INSTALLER_STATUS}" = "Complete" ]; then
            break;
        fi
        if [ "${INSTALLER_STATUS}" = "Error" ]; then
            logger "ERROR" "CANCELED : because the installation failed"
            exit 1
        fi
    done
    if [ "${INSTALLER_STATUS}" != "Complete" ]; then
        logger "ERROR" "CANCELED : because the installation wait timeout"
        exit 1
    fi

    logger "INFO" "START : Get TOKEN"
    TOKEN=$(kubectl get secret gitlab-root-token -n ${GITLAB_NAMESPACE} -o jsonpath='{.data.TOKEN}' | base64 --decode)
    if [ $? -ne 0 ]; then
        logger "ERROR" "CANCELED : Failed to get token"
        exit 1
    fi

    logger "INFO" "START : Encode CLONE URL"
    GITLAB_CLONE_URL_ENC=$(echo "${GITLAB_CLONE_URL}" | perl -nle 's/([^\w ])/"%".unpack("H2",$1)/eg; s/ /\+/g; print')
    if [ $? -ne 0 ]; then
        logger "ERROR" "encode clone url"
        exit 1
    fi

    logger "INFO" "START : Setting custom_http_clone_url_root"
    SUCCEED_SETTING=0

    STATUS_CODE=$(
        curl -X PUT \
        -H 'Content-Type: application/json' \
        -H "PRIVATE-TOKEN: ${TOKEN}" \
        -w '%{http_code}\n' -o /dev/null \
        "${GIT_API_BASE}/api/v4/application/settings?custom_http_clone_url_root=${GITLAB_CLONE_URL_ENC}" \
    )
    logger "INFO" "Setting custom_http_clone_url_root STATUS_CODE:${STATUS_CODE}"

    if [ $? -ne 0 -o "${STATUS_CODE}" != "200" ]; then
        logger "ERROR" "configuration was failed"
        exit 1
    fi

    logger "INFO" "configuration was successful"
    exit 0
  set-host.sh: |
    #!/bin/bash
    #   Copyright 2021 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.


    BASENAME=$(basename "$0")
    CMD_RESULT="/tmp/result.$$"
    LF='
    '
    source "`dirname $0`/common-import-logger.sh" "${BASENAME}"

    logger "INFO" "START : ${BASENAME}"

    #
    # Initialize variables
    #
    STEP=0
    ALLSTEPS=5

    #
    # check parameter
    #
    if [ $# -ne 1 ]; then
        logger "ERROR" "Usage : ${BASENAME} [hostname or IPaddress]"
        logger "ERROR" "Check the parameters and try again"
        exit 1
    fi

    PRM_MY_HOST="$1"
    logger "INFO" "PARAM PRM_MY_HOST : ${PRM_MY_HOST}"

    #
    # Initialize Setting Parameter
    #
    STEP=$(expr ${STEP} + 1)
    logger "INFO" "**** STEP : ${STEP} / ${ALLSTEPS} : Initialize Setting Parameter ..."

    OIDC_PASSPHRASE=$(< /dev/urandom tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1 | sort | uniq)
    if [ $? -ne 0 -o -z "${OIDC_PASSPHRASE}" ]; then
        logger "ERROR" "Generate OIDC_PASSPHRASE"
        exit 2
    fi

    OIDC_PASSPHRASE_B64=$(echo -n "${OIDC_PASSPHRASE}" | base64)
    if [ $? -ne 0 -o -z "${OIDC_PASSPHRASE_B64}" ]; then
        logger "ERROR" "Generate OIDC_PASSPHRASE_B64"
        exit 2
    fi

    KEYCLOAK_ADMIN_PASSW=$(< /dev/urandom tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1 | sort | uniq)
    if [ $? -ne 0 -o -z "${KEYCLOAK_ADMIN_PASSW}" ]; then
        logger "ERROR" "Generate KEYCLOAK_ADMIN_PASSW"
        exit 2
    fi

    KEYCLOAK_ADMIN_PASSW_B64=$(echo -n "${KEYCLOAK_ADMIN_PASSW}" | base64)
    if [ $? -ne 0 -o -z "${KEYCLOAK_ADMIN_PASSW_B64}" ]; then
        logger "ERROR" "Generate KEYCLOAK_ADMIN_PASSW_B64"
        exit 2
    fi

    EPOCH_ADMIN_PASSWD=$(< /dev/urandom tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1 | sort | uniq)
    if [ $? -ne 0 -o -z "${EPOCH_ADMIN_PASSWD}" ]; then
        logger "ERROR" "Generate EPOCH_ADMIN_PASSWD"
        exit 2
    fi

    EPOCH_ADMIN_PASSWD_B64=$(echo -n "${EPOCH_ADMIN_PASSWD}" | base64)
    if [ $? -ne 0 -o -z "${EPOCH_ADMIN_PASSWD_B64}" ]; then
        logger "ERROR" "Generate EPOCH_ADMIN_PASSWD_B64"
        exit 2
    fi

    #
    # Set parameter to configmap
    #
    STEP=$(expr ${STEP} + 1)
    logger "INFO" "**** STEP : ${STEP} / ${ALLSTEPS} : Set Parameter To Configmap"

    kubectl patch configmap -n epoch-system host-setting-config -p "\
    {\
        \"data\" : {\
            \"EPOCH_HOSTNAME\" : \"${PRM_MY_HOST}\"\
        }\
    }" &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl patch configmap -n epoch-system host-setting-config${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "patch configmap host-setting-config"
        exit 2
    fi
    logger "INFO" "CALL : kubectl patch configmap -n epoch-system host-setting-config${LF}`cat ${CMD_RESULT}`"


    kubectl patch configmap -n exastro-platform-authentication-infra exastro-platform-authentication-infra-env -p "\
    {\
        \"data\" : {\
            \"EXASTRO_KEYCLOAK_HOST\" : \"${PRM_MY_HOST}\"\
        }\
    }" &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl patch configmap -n exastro-platform-authentication-infra exastro-platform-authentication-infra-env${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "patch configmap exastro-platform-authentication-infra-env"
        exit 2
    fi
    logger "INFO" "CALL : kubectl patch configmap -n exastro-platform-authentication-infra exastro-platform-authentication-infra-env${LF}`cat ${CMD_RESULT}`"


    kubectl patch configmap -n epoch-system epoch-service-api-config -p "\
    {\
        \"data\" : {\
            \"EPOCH_EPAI_HOST\" : \"${PRM_MY_HOST}\"\
        }\
    }" &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl patch configmap -n epoch-system epoch-service-api-config${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "patch configmap epoch-service-api-config"
        exit 2
    fi
    logger "INFO" "CALL : kubectl patch configmap -n epoch-system epoch-service-api-config${LF}`cat ${CMD_RESULT}`"


    kubectl patch secret -n exastro-platform-authentication-infra exastro-platform-authentication-infra-secret -p "\
    {\
        \"data\" : {\
            \"GATEWAY_CRYPTO_PASSPHRASE\" : \"${OIDC_PASSPHRASE_B64}\",\
            \"KEYCLOAK_PASSWORD\" : \"${KEYCLOAK_ADMIN_PASSW_B64}\",\
            \"EPOCH_PASSWORD\" : \"${EPOCH_ADMIN_PASSWD_B64}\"\
        }\
    }" &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl patch secret -n exastro-platform-authentication-infra exastro-platform-authentication-infra-secret${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "patch secret exastro-platform-authentication-infra-secret"
        exit 2
    fi
    logger "INFO" "CALL : kubectl patch secret -n exastro-platform-authentication-infra exastro-platform-authentication-infra-secret${LF}`cat ${CMD_RESULT}`"

    #
    # restart to reflect the settings
    #
    STEP=$(expr ${STEP} + 1)
    logger "INFO" "**** STEP : ${STEP} / ${ALLSTEPS} : restart to reflect the settings ..."

    kubectl rollout restart deploy -n epoch-system epoch-service-api2 &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl rollout restart deploy -n epoch-system epoch-service-api2${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "rollout restart epoch-service-api2"
        exit 2
    fi
    logger "INFO" "CALL : kubectl rollout restart deploy -n epoch-system epoch-service-api2${LF}`cat ${CMD_RESULT}`"

    kubectl rollout restart deploy -n epoch-system epoch-control-argocd-api &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl rollout restart deploy -n epoch-system epoch-control-argocd-api${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "rollout restart epoch-control-argocd-api"
        exit 2
    fi
    logger "INFO" "CALL : kubectl rollout restart deploy -n epoch-system epoch-control-argocd-api${LF}`cat ${CMD_RESULT}`"

    kubectl rollout restart deploy -n epoch-system epoch-control-ita-api &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl rollout restart deploy -n epoch-system epoch-control-ita-api${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "rollout restart epoch-control-ita-api"
        exit 2
    fi
    logger "INFO" "CALL : kubectl rollout restart deploy -n epoch-system epoch-control-ita-api${LF}`cat ${CMD_RESULT}`"

    while true; do
        sleep 5;
        RESTART_BERFORE_API_POD=$(kubectl get pod --selector "name=authentication-infra-api" -n exastro-platform-authentication-infra -o jsonpath="{range .items[*]}{@.metadata.name}{\"\n\"}{end}" 2> /dev/null)
        if [ $? -eq 0 ]; then
            logger "DEBUG" "RESTART_BERFORE_API_POD=${RESTART_BERFORE_API_POD}"
            break;
        fi
    done

    kubectl rollout restart deploy -n exastro-platform-authentication-infra authentication-infra-api &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl rollout restart deploy -n exastro-platform-authentication-infra authentication-infra-api${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "rollout restart authentication-infra-api"
        exit 2
    fi
    logger "INFO" "CALL : kubectl rollout restart deploy -n exastro-platform-authentication-infra authentication-infra-api${LF}`cat ${CMD_RESULT}`"

    while true; do
        sleep 5;
        RESTART_BERFORE_KEYCLOAK_POD=$(kubectl get pod --selector "app=keycloak" -n exastro-platform-authentication-infra -o jsonpath="{range .items[*]}{@.metadata.name}{\"\n\"}{end}" 2> /dev/null)
        if [ $? -eq 0 ]; then
            logger "DEBUG" "RESTART_BERFORE_KEYCLOAK_POD=${RESTART_BERFORE_KEYCLOAK_POD}"
            break;
        fi
    done
    kubectl rollout restart deploy -n exastro-platform-authentication-infra keycloak &> "${CMD_RESULT}"
    if [ $? -ne 0 ]; then
        logger "ERROR" "CALL : kubectl rollout restart deploy -n exastro-platform-authentication-infra keycloak${LF}`cat ${CMD_RESULT}`"
        logger "ERROR" "rollout restart keycloak"
        exit 2
    fi
    logger "INFO" "CALL : kubectl rollout restart deploy -n exastro-platform-authentication-infra keycloak${LF}`cat ${CMD_RESULT}`"

    #
    # wait for restart
    #
    STEP=$(expr ${STEP} + 1)
    logger "INFO" "**** STEP : ${STEP} / ${ALLSTEPS} : wait for restart ..."

    echo -n "waiting ..."
    while true; do
        sleep 5;
        echo -n ".";
        NOT_READY_COUNT=$(
            kubectl get pod -n exastro-platform-authentication-infra -o json 2> /dev/null | \
            jq -r ".items[].status.containerStatuses[].ready" 2> /dev/null | sed -e "/true/d" | wc -l
        )
        if [ $? -ne 0 ]; then
            continue
        fi
        if [ ${NOT_READY_COUNT} -ne 0 ]; then
            logger "DEBUG" "STILL: containerStatuses[].ready=false"
            continue;
        fi
        NOT_READY_COUNT=$(
            kubectl get pod -n exastro-platform-authentication-infra -o jsonpath='{range .items[*]}{@.status.phase}{"\n"}' | \
            sed -e "/Running/d" -e "/Succeeded/d" -e "/^$/d" | \
            wc -l
        )
        if [ $? -ne 0 ]; then
            continue
        fi
        if [ ${NOT_READY_COUNT} -ne 0 ]; then
            logger "DEBUG" "STILL: status.phase=Not Running/Succeeded"
            continue;
        fi

        RESTART_AFTER_API_POD=$(kubectl get pod --selector "name=authentication-infra-api" -n exastro-platform-authentication-infra -o jsonpath="{range .items[*]}{@.metadata.name}{\"\n\"}{end}" 2> /dev/null)
        if [ $? -ne 0 ]; then
            continue
        fi
        if [ `echo "${RESTART_AFTER_API_POD}" | wc -l` -gt 1 ]; then
            logger "DEBUG" "STILL: RESTART_AFTER_API_POD COUNT > 1"
            continue;
        fi
        if [ "${RESTART_BERFORE_API_POD}" = "${RESTART_AFTER_API_POD}" ]; then
            logger "DEBUG" "STILL: NOT CHANGE API POD"
            continue;
        fi

        RESTART_AFTER_KEYCLOAK_POD=$(kubectl get pod --selector "app=keycloak" -n exastro-platform-authentication-infra -o jsonpath="{range .items[*]}{@.metadata.name}{\"\n\"}{end}" 2> /dev/null)
        if [ $? -ne 0 ]; then
            continue
        fi
        if [ `echo "${RESTART_AFTER_KEYCLOAK_POD}" | wc -l` -gt 1 ]; then
            logger "DEBUG" "STILL: RESTART_AFTER_KEYCLOAK_POD COUNT > 1"
            continue;
        fi
        if [ "${RESTART_BERFORE_KEYCLOAK_POD}" = "${RESTART_AFTER_KEYCLOAK_POD}" ]; then
            logger "DEBUG" "STILL: NOT CHANGE KEYCLOAK POD"
            continue;
        fi

        echo "";
        break;
    done;

    logger "DEBUG" "RESTART_AFTER_API_POD=${RESTART_AFTER_API_POD}"
    logger "DEBUG" "RESTART_AFTER_KEYCLOAK_POD=${RESTART_AFTER_KEYCLOAK_POD}"

    #
    # Setting api call
    #
    STEP=$(expr ${STEP} + 1)
    logger "INFO" "**** STEP : ${STEP} / ${ALLSTEPS} : Setting api call ..."

    API_RESPONSE="/tmp/${BASENAME}-infra-setting.$$"

    curl \
        -X POST \
        -H  'content-type: application/json'    \
        -d  @- \
        -Ss \
        -o "${API_RESPONSE}" \
        http://authentication-infra-api.exastro-platform-authentication-infra.svc:8000/settings \
        << EOF
        {
            "realm_name": "exastroplatform",
            "realm_option": {
                "displayName": "Exastro Platform",
                "enabled": "True",
                "registrationAllowed": "True"
            },
            "realm_roles": [
                "epoch-user",
                "epoch-system"
            ],
            "groups": [
                {
                    "parent_group": "",
                    "group_name": "epoch-user"
                }
            ],
            "group_mappings": [
                {
                    "role_name": "epoch-user",
                    "group_name": "epoch-user"
                }
            ],
            "default_group_name": "epoch-user",
            "users": [
            ],
            "admin_users": [
                {
                    "user_name": "epoch-admin",
                    "user_password": "${EPOCH_ADMIN_PASSWD}",
                    "user_groups": [],
                    "user_realm_roles": [],
                    "user_option": {
                        "enabled": "True"
                    }
                }
            ],
            "clients": [
                {
                    "id": "epoch-system",
                    "protocol": "openid-connect",
                    "publicClient": "false",
                    "redirectUris": [
                        "https://${PRM_MY_HOST}:30443/oidc-redirect/",
                        "https://${PRM_MY_HOST}:30443/"
                    ],
                    "baseUrl": "https://${PRM_MY_HOST}:30443/oidc-redirect/",
                    "webOrigins": [],
                    "protocolMappers": [
                        {
                            "name": "epoch-system-client-map-role",
                            "protocol": "openid-connect",
                            "protocolMapper": "oidc-usermodel-client-role-mapper",
                            "config": {
                                "id.token.claim": "true",
                                "access.token.claim": "true",
                                "claim.name": "epoch-role",
                                "multivalued": "true",
                                "userinfo.token.claim": "true",
                                "usermodel.clientRoleMapping.clientId": "epoch-system"
                            }
                        },
                        {
                            "name": "epoch-system-map-role",
                            "protocol": "openid-connect",
                            "protocolMapper": "oidc-usermodel-realm-role-mapper",
                            "config": {
                                "id.token.claim": "true",
                                "access.token.claim": "true",
                                "claim.name": "epoch-role",
                                "multivalued": "true",
                                "userinfo.token.claim": "true"
                            }
                        }
                    ]
                }
            ],
            "conf_template": "epoch-system-template.conf",
            "token_user": "admin",
            "token_password": "${KEYCLOAK_ADMIN_PASSW}",
            "token_realm_name": "master"
        }
    EOF
    if [ $? -ne 0 ]; then
        logger "ERROR" "Setting api call"
        exit 2
    fi

    API_RESULT=$(cat "${API_RESPONSE}" | jq -r ".result")
    if [ $? -ne 0 ]; then
        logger "ERROR" "Setting api response:\n`cat ${API_RESPONSE}`"
        logger "ERROR" "Api Logs:\n`kubectl logs deploy/authentication-infra-api -n exastro-platform-authentication-infra`"
        logger "ERROR" "Setting api"
        exit 2
    fi
    if [ "${API_RESULT}" != "200" ]; then
        logger "ERROR" "Setting api response:\n`cat ${API_RESPONSE}`"
        logger "ERROR" "Api Logs:\n`kubectl logs deploy/authentication-infra-api -n exastro-platform-authentication-infra`"
        logger "ERROR" "Setting api"
        exit 2
    fi

    logger "INFO" "**** ${BASENAME} completed successfully ****"
    exit 0
  set-proxy.sh: |
    #!/bin/bash
    #   Copyright 2021 NEC Corporation
    #
    #   Licensed under the Apache License, Version 2.0 (the "License");
    #   you may not use this file except in compliance with the License.
    #   You may obtain a copy of the License at
    #
    #       http://www.apache.org/licenses/LICENSE-2.0
    #
    #   Unless required by applicable law or agreed to in writing, software
    #   distributed under the License is distributed on an "AS IS" BASIS,
    #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    #   See the License for the specific language governing permissions and
    #   limitations under the License.

    BASENAME=$(basename "$0")
    CMD_RESULT="/tmp/result.$$"
    LF='
    '
    source "`dirname $0`/common-import-logger.sh" "${BASENAME}"

    logger "INFO" "START : ${BASENAME}"

    if [ $# -ne 2 ]; then
        logger "ERROR" "Usage : ${BASENAME} [https_proxy] [http_proxy]"
        logger "ERROR" "Check the parameters and try again"
        exit 1
    fi

    PRM_HTTPS_PROXY=$1
    PRM_HTTP_PROXY=$2

    logger "INFO" "PARAM PRM_HTTPS_PROXY : ${PRM_HTTPS_PROXY}"
    logger "INFO" "PARAM PRM_HTTP_PROXY  : ${PRM_HTTP_PROXY}"

    #------------------------------------------------
    logger "INFO" "START : Check kubernetes api server config"

    API_SERVER_POD_NAME=$(\
        kubectl get pod -n kube-system -o jsonpath="{range .items[*]}{@.metadata.name}{\"\t\"}{@.metadata.labels.component}{@.value}{\"\n\"}{end}" |\
        awk '$2=="kube-apiserver" {print $1}' |\
        head -n 1)

    kubectl get pod ${API_SERVER_POD_NAME} -n kube-system -o jsonpath="{range .spec.containers[*].env[*]}{@.name}{\"\t\"}{@.value}{\"\n\"}{end}" | \
    awk '\
    toupper($1)=="NO_PROXY" {\
        if(index("," $2 ",",",tekton-pipelines-webhook.tekton-pipelines.svc,")==0) {\
            exit 1;\
        }\
        if(index("," $2 ",",",tekton-triggers-webhook.tekton-pipelines.svc,")==0) {\
            exit 1;\
        }\
    }'

    if [ $? -ne 0 ]; then
        logger "ERROR" "kubernetes settings required${LF}Set the no_proxy setting on the kubernetes api server to \"tekton-pipelines-webhook.tekton-pipelines.svc\" and \"tekton-triggers-webhook.tekton-pipelines.svc\" and try again${LF}"
        exit 1
    fi

    #------------------------------------------------
    kubectl get configmap epoch-control-api-config -n epoch-system &> /dev/null
    if [ $? -eq 0 ]; then
        logger "INFO" "START : patch epoch-control-api-config"
        kubectl patch configmap epoch-control-api-config -n epoch-system -p "\
        {\
            \"data\" : {\
                \"HTTP_PROXY\" : \"${PRM_HTTP_PROXY}\",\
                \"HTTPS_PROXY\" : \"${PRM_HTTPS_PROXY}\"\
            }\
        }"
        if [ $? -ne 0 ]; then
            logger "ERROR" "patch epoch-control-api-config"
            exit 1
        fi
    fi

    kubectl get configmap proxy-setting-config -n epoch-system &> /dev/null
    if [ $? -eq 0 ]; then
        logger "INFO" "START : patch proxy-setting-config"
        kubectl patch configmap proxy-setting-config -n epoch-system -p "\
        {\
            \"data\" : {\
                \"HTTP_PROXY\" : \"${PRM_HTTP_PROXY}\",\
                \"HTTPS_PROXY\" : \"${PRM_HTTPS_PROXY}\"\
            }\
        }"
        if [ $? -ne 0 ]; then
            logger "ERROR" "patch proxy-setting-config"
            exit 1
        fi
    fi

    kubectl get configmap epoch-cicd-api-config -n epoch-system &> /dev/null
    if [ $? -eq 0 ]; then
        logger "INFO" "START : patch epoch-cicd-api-config"
        kubectl patch configmap epoch-cicd-api-config -n epoch-system -p "\
        {\
            \"data\" : {\
                \"HTTP_PROXY\" : \"${PRM_HTTP_PROXY}\",\
                \"HTTPS_PROXY\" : \"${PRM_HTTPS_PROXY}\"\
            }\
        }"
        if [ $? -ne 0 ]; then
            logger "ERROR" "patch epoch-cicd-api-config"
            exit 1
        fi
    fi

    #------------------------------------------------
    kubectl get deploy -n epoch-system -o jsonpath="{range .items[*]}{@.metadata.name}{\"\n\"}{end}" |\
    while read DEPLOY; do
        REFERENCE_COUNT=$(
            kubectl get deploy -n epoch-system "${DEPLOY}" -o yaml |
            sed -n -e '/epoch-control-api-config/p' -e '/proxy-setting-config/p' -e '/epoch-cicd-api-config/p' |
            wc -l
        )
        if [ ${REFERENCE_COUNT} -gt 0 ]; then
            logger "INFO" "rollout restart deploy ${DEPLOY}"
            kubectl rollout restart deploy -n epoch-system "${DEPLOY}"
            if [ $? -ne 0 ]; then
                logger "ERROR" "rollout restart deploy ${DEPLOY}"
                exit 1
            fi
        fi
    done

    exit 0
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: epoch-setting-tools-script
  namespace: epoch-system
