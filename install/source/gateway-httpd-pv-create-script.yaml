apiVersion: v1
data:
  epoch-pv-creator.sh: |
    #!/bin/bash

    echo "[INFO] START: $(basename $0)"

    SCRIPT_PATH=$(dirname $0)

    kubectl get pod -n "${PRM_NAMESPACE}" "${HOSTNAME}" &> /dev/null
    if [ $? -ne 0 ]; then
        echo "[ERROR] Not Found Pod : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME} hostname=${HOSTNAME}"
        exit 1
    fi

    WORKER_NODE_NAME=$(kubectl get pod -n "${PRM_NAMESPACE}" "${HOSTNAME}" -o jsonpath="{.spec.nodeName}")
    echo "WORKER_NODE_NAME:${WORKER_NODE_NAME}"

    if [ -z "${WORKER_NODE_NAME}" ]; then
        echo "[ERROR] Could not get the node name : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME}"
        exit 1
    fi

    sed -e "s/#WORKER-NODE-NAME#/${WORKER_NODE_NAME}/g" "${SCRIPT_PATH}/${PRM_PV_TEMPLATE}" | \
    kubectl apply -f -
    if [ $? -ne 0 ]; then
        echo "[ERROR] Failed to create Persistent Volume : namespace=${PRM_NAMESPACE} jobname=${PRM_JOBNAME}"
        exit 1
    fi

    kubectl delete job -n "${PRM_NAMESPACE}" "${PRM_JOBNAME}"
  exastro-authentication-infra-httpd-conf-pv-template.yaml: |
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: exastro-authentication-infra-sc
    provisioner: kubernetes.io/no-provisioner
    volumeBindingMode: WaitForFirstConsumer

    ---
    apiVersion: v1
    kind: PersistentVolume
    metadata:
      name: exastro-authentication-infra-httpd-conf
      labels:
        type: local
      annotations:
        pv.kubernetes.io/bound-by-controller: "yes"
    spec:
      storageClassName: exastro-authentication-infra-sc
      capacity:
        storage: 500Mi
      accessModes:
        - ReadWriteMany
      hostPath:
        path: /var/data/epoch/authc-httpd/conf
        type: DirectoryOrCreate
      nodeAffinity:
        required:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/hostname
              operator: In
              values:
              - #WORKER-NODE-NAME#

    ---
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: exastro-authentication-infra-httpd-conf
      namespace: exastro-platform-authentication-infra
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 500Mi
      storageClassName: exastro-authentication-infra-sc
      volumeMode: Filesystem
      volumeName: exastro-authentication-infra-httpd-conf
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: gateway-httpd-pv-create-script
  namespace: epoch-system
